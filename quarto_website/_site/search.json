[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\nThis is a sample site to test out quarto"
  },
  {
    "objectID": "quarto_files/01_sample_processing.html",
    "href": "quarto_files/01_sample_processing.html",
    "title": "R and Python",
    "section": "",
    "text": "Check conda setup\n\nmicromamba env list\n\n  Name                  Active  Path                                          \n────────────────────────────────────────────────────────────────────────────────\n                                /home/edo/Documents/test/test_napari/env      \n  base                          /home/edo/micromamba                          \n  bioinfo                       /home/edo/micromamba/envs/bioinfo             \n  env_MOFA                      /home/edo/micromamba/envs/env_MOFA            \n  env_RCTD_test                 /home/edo/micromamba/envs/env_RCTD_test       \n  env_SpatialData               /home/edo/micromamba/envs/env_SpatialData     \n  env_bin2cell                  /home/edo/micromamba/envs/env_bin2cell        \n  env_cellranger7               /home/edo/micromamba/envs/env_cellranger7     \n  env_cellranger8               /home/edo/micromamba/envs/env_cellranger8     \n  env_cellranger901             /home/edo/micromamba/envs/env_cellranger901   \n  env_cellsnp_vireo             /home/edo/micromamba/envs/env_cellsnp_vireo   \n  env_nextflow                  /home/edo/micromamba/envs/env_nextflow        \n  env_python            *       /home/edo/micromamba/envs/env_python          \n  env_rclone                    /home/edo/micromamba/envs/env_rclone          \n  env_scanpy_test               /home/edo/micromamba/envs/env_scanpy_test     \n  env_scvi                      /home/edo/micromamba/envs/env_scvi            \n  env_snakemake8                /home/edo/micromamba/envs/env_snakemake8      \n  env_spaceranger2              /home/edo/micromamba/envs/env_spaceranger2    \n  env_spaceranger3              /home/edo/micromamba/envs/env_spaceranger3    \n  env_squidpy122                /home/edo/micromamba/envs/env_squidpy122      \n  env_stardist                  /home/edo/micromamba/envs/env_stardist        \n  env_video                     /home/edo/micromamba/envs/env_video           \n  machine-learning-env          /home/edo/micromamba/envs/machine-learning-env\n  rms-processing                /home/edo/micromamba/envs/rms-processing      \n  rms-report                    /home/edo/micromamba/envs/rms-report          \n\n\nMake sure the packages from python are effectively installed\n\nmicromamba list | grep -E \"pandas|scikit\"\n\n  pandas                   2.2.2         py312hfb8ada1_0      conda-forge\n  scikit-learn             1.7.0         py312h7a48858_1      conda-forge\n\n\n\n\nGenerate some data\nSample code to generate the data in R\n\n\nCode\n# Load the dplyr library for data manipulation\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\n# Ensure the script is reproducible\nset.seed(42)\n\n# Create a mock dataset\n# This simulates data for a simple classification problem,\n# like predicting an outcome based on a user's age and group.\nmock_data &lt;- tibble(\n  age = sample(18:65, 100, replace = TRUE),\n  group = sample(c(\"A\", \"B\", \"C\"), 100, replace = TRUE),\n  # Create a simple binary outcome based on age and group\n  outcome = as.integer(age &gt; 40 & group %in% c(\"B\", \"C\") | age &gt; 55)\n)\n\n# Save the data to a CSV file in the 'data' subdirectory\n# First, create the directory if it doesn't exist\nwrite.csv(mock_data, \"../data/mock_data.csv\", row.names = FALSE)\n\n# print the head of the metadata\nmock_data\n\n\n# A tibble: 100 × 3\n     age group outcome\n   &lt;int&gt; &lt;chr&gt;   &lt;int&gt;\n 1    54 A           0\n 2    18 A           0\n 3    42 A           0\n 4    27 A           0\n 5    53 B           1\n 6    35 C           0\n 7    64 A           1\n 8    41 B           1\n 9    24 A           0\n10    53 C           1\n# ℹ 90 more rows\n\n\n\n\nModelling in python\n\n\nCode\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\ndef train_and_predict():\n    \"\"\"\n    This function loads the data, trains a simple logistic regression model,\n    and saves the predictions.\n    \"\"\"\n    # Load the dataset created by the R script\n    df = pd.read_csv(\"../data/mock_data.csv\")\n\n    # Prepare the data for modeling\n    # Use one-hot encoding for the 'group' categorical feature\n    df_processed = pd.get_dummies(df, columns=['group'], drop_first=True)\n\n    # Define features (X) and target (y)\n    X = df_processed.drop('outcome', axis=1)\n    y = df_processed['outcome']\n\n    # Split data into training and testing sets\n    X_train, X_test, y_train, y_test = train_test_split(\n        X, y, test_size=0.3, random_state=42\n    )\n\n    # Initialize and train the logistic regression model\n    model = LogisticRegression(random_state=42)\n    model.fit(X_train, y_train)\n\n    # Make predictions on the full dataset to return to R\n    all_predictions = model.predict(X)\n\n    # Add predictions to the original dataframe\n    df['predicted_outcome'] = all_predictions\n\n    # Save the results with predictions to a new CSV\n    df.to_csv(\"../data/predictions.csv\", index=False)\n\n# Run the main function\nif __name__ == \"__main__\":\n    train_and_predict()\n\n\nCheck the output of the prediction\n\n\nCode\ndf &lt;- read_csv(\"../data/predictions.csv\")\n\n\nRows: 100 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): group\ndbl (3): age, outcome, predicted_outcome\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\n# print the head of the prediction\ndf\n\n\n# A tibble: 100 × 4\n     age group outcome predicted_outcome\n   &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;             &lt;dbl&gt;\n 1    54 A           0                 1\n 2    18 A           0                 0\n 3    42 A           0                 0\n 4    27 A           0                 0\n 5    53 B           1                 1\n 6    35 C           0                 0\n 7    64 A           1                 1\n 8    41 B           1                 1\n 9    24 A           0                 0\n10    53 C           1                 1\n# ℹ 90 more rows\n\n\nVisualize the results\n\n\nCode\nlibrary(caret)\n\n\nLoading required package: lattice\n\n\n\nAttaching package: 'caret'\n\n\nThe following object is masked from 'package:purrr':\n\n    lift\n\n\nCode\n# make them as factors\npredicted_outcome &lt;- factor(df$predicted_outcome)\nactual_outcome &lt;- factor(df$outcome)\n\nconf_matrix &lt;- confusionMatrix(data = predicted_outcome, reference = actual_outcome)\n\n# show the confusion matrix\nconf_matrix\n\n\nConfusion Matrix and Statistics\n\n          Reference\nPrediction  0  1\n         0 46  2\n         1  6 46\n                                          \n               Accuracy : 0.92            \n                 95% CI : (0.8484, 0.9648)\n    No Information Rate : 0.52            \n    P-Value [Acc &gt; NIR] : &lt;2e-16          \n                                          \n                  Kappa : 0.8403          \n                                          \n Mcnemar's Test P-Value : 0.2888          \n                                          \n            Sensitivity : 0.8846          \n            Specificity : 0.9583          \n         Pos Pred Value : 0.9583          \n         Neg Pred Value : 0.8846          \n             Prevalence : 0.5200          \n         Detection Rate : 0.4600          \n   Detection Prevalence : 0.4800          \n      Balanced Accuracy : 0.9215          \n                                          \n       'Positive' Class : 0               \n                                          \n\n\nCode\n# plot the data\ncm_table &lt;- as.data.frame(conf_matrix$table)\n\n# Create the heatmap plot\nconcordance_plot &lt;- ggplot(data = cm_table, aes(x = Reference, y = Prediction, fill = Freq)) +\n  geom_tile(color = \"white\") + # Add tile borders\n  geom_text(aes(label = Freq), vjust = 1, size = 6, color = \"black\") + # Add counts to the tiles\n  scale_fill_gradient(low = \"#e6f5ff\", high = \"#006dcc\") + # Use a blue color gradient\n  labs(\n    title = \"Model Concordance: Confusion Matrix\",\n    subtitle = \"Comparing Predicted vs. Actual Outcomes\",\n    x = \"Actual Outcome\",\n    y = \"Predicted Outcome\"\n  ) +\n  theme_minimal() + # Use a clean theme\n  theme(\n    legend.position = \"none\", # Hide the color bar legend\n    plot.title = element_text(hjust = 0.5, size = 16),\n    plot.subtitle = element_text(hjust = 0.5, size = 12)\n  )\n\n# Display the plot\nconcordance_plot\n\n\n\n\n\n\n\n\n\nPlot by age group\n\n\nCode\n# Create a new column to check if the prediction was correct\n# Then, create age groups using the cut() function\naccuracy_by_age &lt;- df %&gt;%\n  mutate(\n    correct_prediction = case_when(predicted_outcome == outcome ~ 1,\n                                   T~0),\n    age_group = cut(age,\n                    breaks = c(17, 35, 50, Inf),\n                    labels = c(\"18-35\", \"36-50\", \"51+\"))\n  ) %&gt;%\n  group_by(age_group) %&gt;%\n  # Calculate the accuracy for each group\n  summarise(\n    accuracy = mean(correct_prediction),\n    count = n() # Get the number of observations in each group\n  )\n\n# Create the bar plot\nage_accuracy_plot &lt;- ggplot(accuracy_by_age, aes(x = age_group, y = accuracy, fill = age_group)) +\n  geom_bar(stat = \"identity\") +\n  geom_text(aes(label = paste0(round(accuracy * 100), \"%\")), vjust = -0.5) + # Add accuracy percentage\n  scale_y_continuous(limits = c(0, 1), labels = scales::percent) + # Format y-axis as percentage\n  labs(\n    title = \"Model Accuracy by Age Group\",\n    x = \"Age Group\",\n    y = \"Accuracy\"\n  ) +\n  theme_minimal() +\n  theme(legend.position = \"none\")\n\n# Display the plot\nage_accuracy_plot"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "quarto_website",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "quarto_files/index.html",
    "href": "quarto_files/index.html",
    "title": "quarto_website",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "quarto_files/about.html",
    "href": "quarto_files/about.html",
    "title": "About",
    "section": "",
    "text": "About this site\nThis is a sample site to test out quarto"
  }
]